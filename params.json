{"name":"Shishito","tagline":"Python module for selenium webdriver test execution","body":"# Shishito\r\n\r\nShishito is module for web and mobile application functional testing using Selenium Webdriver & Python.\r\nIt runs tests using included libraries and generates nice test results output.\r\n\r\nDocumentation - http://shishito.readthedocs.org/en/latest/index.html (hosted on Read the Docs)\r\n\r\n## Features\r\n\r\n* runs python Selenium Webdriver tests via PyTest\r\n* easy configuration for local and remote (BrowserStack, Appium, ..) test execution\r\n* contains useful test libraries\r\n* generates HTML test results report (with screenshots for failed tests)\r\n* designed to be used as a module (by multiple projects if needed)\r\n\r\n## Pre-requisities\r\n\r\nInstall Python moodules from requirements.txt\r\n\r\n```pip install -r requirements.txt```\r\n\r\nWebdriver drivers need to be setup (ChromeDriver, InternetExplorerDriver etc.)\r\n\r\n## Quick Start\r\n\r\n1. clone Shishito repository.\r\n```git clone git@github.com:salsita/shishito.git```\r\n1. add *shishito* directory into PYTHONPATH environment variable\r\n1. clone sample test project repository https://github.com/salsita/shishito-sample-project\r\n```git clone git@github.com:salsita/shishito-sample-project.git```\r\n1. if you want to use BrowserStack for running your tests, replace \"bs_username\", \"bs_password\" values with your credentials in ***shishito-sample-project/config/server_config.properties***\r\n or pass it to runner python file as command line argument using flag --browserstack username:token\r\n1. if you want to use Saucelabs for running your tests, add your credentials to saucelabs variable in ***shishito-sample-project/config/server_config.properties***\r\n or pass it to runner python file as command line argument using flag --saucelabs username:token\r\n1. set your preferred browser settings in ***shishito-sample-project/config/web/(browserstack|local).properties*** or for mobile apps in ***shishito-sample-project/config/mobile/appium.properties***\r\n1. run *google_test_runner.py* in sample project folder!\r\n\r\nIf you use local driver, you should now observe browser being started and tests running.\r\nThere are information about progress shown in console output.\r\nOnce testing is finished, HTML report can be found in:\r\n```\r\nshishito-sample-project/results folder # HTML report\r\nshishito-sample-project/results_archive folder # zipped HTML report\r\n```\r\n\r\n## Continuous Integration\r\n\r\nUsing Shishito with Continuous Integration solution, such as Jenkins, is easy!\r\nAll you need to do is clone Shishito repo and add it into the PYTHONPATH.\r\n\r\nExample script below (Jenkins \"execute shell\" build step):\r\n```bash\r\n#!/bin/bash\r\n######################\r\n# clone Shishito  #\r\n######################\r\n\r\ncd $WORKSPACE\r\ngit clone git@github.com:salsita/shishito.git\r\n\r\n######################\r\n# VARIABLES          #\r\n######################\r\n\r\nexport PYTHONPATH=${PYTHONPATH}:/$WORKSPACE/shishito\r\n\r\n######################\r\n# SCRIPT             #\r\n######################\r\n\r\npython google_test_runner.py\r\n```\r\n\r\n## Command line options\r\n\r\n```python\r\n--platform web         # define platform on which run tests (currently supported: web, mobile, generic)\r\n--environmnet local    # define environment in which run tests (currently supported: local, browserstack, appium, remote)\r\n--test_directory tests # define directory where to lookup for tests (project_root + test_directory)\r\n\r\n# supported platform/environment combinations:\r\n#   generic/local\r\n#   generic/remote\r\n#   web/local\r\n#   web/browserstack\r\n#   web/remote\r\n#   mobile/appium (can run on local/remote appium server or on saucelabs)\r\n\r\n--smoke # runs only tests with fixture \"@pytest.mark.smoke\"\r\n\r\n--browserstack testuser1:p84asd21d15asd454 # authenticate on BrowserStack using user \"testuser1\" and token \"p84asd21d15asd454\"\r\n--saucelabs testuser1:p84asd21d15asd454 # authenticate on Saucelabs using user \"testuser1\" and token \"p84asd21d15asd454\"\r\n\r\n```\r\n\r\nIf no arguments are specified, Shishito, by default, searches for settings combinations in (server|local).properties files and runs tests according to them.\r\n\r\n## Configuration files\r\n\r\n***server_config.properties***\r\n\r\n* default configuration file with test variables\r\n* changes to variables should be maintained in VCS; so that configuration can be reused for automated test execution\r\n\r\n```\r\n# modules\r\ntest_platform=web\r\ntest_environment=local\r\n\r\n# test dir\r\ntest_directory=tests\r\n\r\n# General\r\nbase_url=http://www.google.com\r\nenvironment_configuration=Chrome\r\n```\r\n\r\n* *test_platform* - on which platform run tests (web, mobile)\r\n* *test_environment* - in which environment run tests (local, browserstack, appium)\r\n* *test_directory* - in which directory lookup for tests\r\n* *base_url* - url that will be loaded by default upon start of each test\r\n* *environment_configuration* - which configuration use from <environment>.properties file (used when tests are run without runner)\r\n* *remote_driver_url* - remote driver hub. Selenium server needs to be running on this url.\r\n\r\n***local_config.properties***\r\n\r\n* if variable *local_execution=True*, script will look first search local config for test variables\r\n* in case variables are not found, it will fall back to values in default *server_config.properties*\r\n* changes to this file should **not** be maintained in VCS (they serve only for local test execution)\r\n\r\n***\\<platform\\>/\\<environment\\>.properties***\r\n\r\n* contains combinations, for which the tests should be executed\r\n* e.g. browser and resolution for local web browser\r\n\r\n***conftest.py***\r\n\r\n* helper file that defines command line arguments, provides fixtures and other information for Shishito runner\r\n\r\n## Configuration\r\n\r\nShishito can be configured with command lines arguments and config files. Some configuration values are also added as arguments to PyTest (depends on test environment).\r\nConfiguration values are looked up according to these priorities:\r\n1. pytest.config\r\n1. command line arguments\r\n1. local configuration file (if enabled: local_execution=True)\r\n1. server cofiguration file\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}